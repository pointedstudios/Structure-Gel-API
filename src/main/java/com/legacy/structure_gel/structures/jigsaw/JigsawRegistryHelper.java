package com.legacy.structure_gel.structures.jigsaw;

import java.util.List;

import com.mojang.datafixers.util.Pair;

import net.minecraft.util.ResourceLocation;
import net.minecraft.world.gen.feature.jigsaw.JigsawManager;
import net.minecraft.world.gen.feature.jigsaw.JigsawPattern;
import net.minecraft.world.gen.feature.jigsaw.JigsawPattern.PlacementBehaviour;
import net.minecraft.world.gen.feature.jigsaw.JigsawPiece;

/**
 * Assists in the registry process for Jigsaw structures to shorten names and
 * give shorter methods. This is used along with {@link JigsawPoolBuilder}
 * 
 * @author David
 *
 */
public class JigsawRegistryHelper
{
	public final String modid;
	public final String prefix;

	/**
	 * @see JigsawRegistryHelper
	 * @param modid
	 */
	public JigsawRegistryHelper(String modid)
	{
		this(modid, "");
	}

	/**
	 * @see JigsawRegistryHelper
	 * @param modid : The mod. Duh.
	 * @param prefix : Placed between modid and the name provided in the resource
	 *            location generated by the JigsawPoolBuilder. Leave this field
	 *            blank if you don't want to worry about it.
	 */
	public JigsawRegistryHelper(String modid, String prefix)
	{
		this.modid = modid;
		this.prefix = prefix;
	}

	/**
	 * Creates a new instance of this with the existing prefix and this modid.<br>
	 * <br>
	 * Note: Any JigsawPoolBuilders created/cloned from the original instance will
	 * still reference the original and use its modid.
	 * 
	 * @param modid
	 * @return {@link JigsawRegistryHelper}
	 */
	public JigsawRegistryHelper setModID(String modid)
	{
		return new JigsawRegistryHelper(modid, this.prefix);
	}

	/**
	 * Creates a new instance of this with the existing modid and this prefix.<br>
	 * <br>
	 * Note: Any JigsawPoolBuilders created/cloned from the original instance will
	 * still reference the original and use its prefix.
	 * 
	 * @param prefix
	 * @return {@link JigsawRegistryHelper}
	 */
	public JigsawRegistryHelper setPrefix(String prefix)
	{
		return new JigsawRegistryHelper(this.modid, prefix);
	}

	/**
	 * Quick way to get a {@link JigsawPoolBuilder} using this registry instance.
	 * You could also do this in the JigsawPoolBuilder class.
	 * 
	 * @return {@link JigsawPoolBuilder}
	 */
	public JigsawPoolBuilder builder()
	{
		return new JigsawPoolBuilder(this);
	}

	/**
	 * Registers a jigsaw pool in {@link JigsawManager#REGISTRY}. For most simple
	 * cases, you can use {@link #register(String, List)} or
	 * {@link #register(ResourceLocation, List)}. ResourceLocations are generated
	 * using {@link #locatePiece(String)} with the modid and prefix. For names not
	 * generated like this, use
	 * {@link #register(ResourceLocation, ResourceLocation, List, PlacementBehaviour)}
	 * 
	 * @param poolName : The name of the pool. Other jigsaw blocks will ask for
	 *            this, so make sure it matches. Uses {@link #locatePiece(String)}
	 *            with the prefix and modid included. Use a ResourceLocation instead
	 *            to set it yourself.
	 * @param defaultPool : The pool to generate if the main pool fails to place.
	 *            Needs better documentation.
	 * @param pool : The structurs that this pool can generate. Use a
	 *            {@link JigsawPoolBuilder} from {@link #builder()} for simplicity.
	 * @param placement : How the structure will place. Rigid by default.
	 */
	public void register(String poolName, String defaultPool, List<Pair<JigsawPiece, Integer>> pool, JigsawPattern.PlacementBehaviour placement)
	{
		JigsawManager.REGISTRY.register(new JigsawPattern(locatePiece(poolName), locatePiece(defaultPool), pool, placement));
	}

	/**
	 * @see #register(String, String, List, PlacementBehaviour)
	 * @param poolName
	 * @param defaultPool
	 * @param pool
	 */
	public void register(String poolName, String defaultPool, List<Pair<JigsawPiece, Integer>> pool)
	{
		register(poolName, defaultPool, pool, JigsawPattern.PlacementBehaviour.RIGID);
	}

	/**
	 * @see #register(String, String, List, PlacementBehaviour)
	 * @param poolName
	 * @param pool
	 * @param placement
	 */
	public void register(String poolName, List<Pair<JigsawPiece, Integer>> pool, JigsawPattern.PlacementBehaviour placement)
	{
		register(locatePiece(poolName), new ResourceLocation("empty"), pool, placement);
	}

	/**
	 * Registers a jigsaw pool in JigsawManager.REGISTRY.
	 * 
	 * @param poolName : the name of the pool. Other jigsaw blocks will ask for
	 *            this, so make sure it matches. Uses {@link #locatePiece(String)}
	 *            with the prefix and modid included. Use a ResourceLocation instead
	 *            to set it yourself.
	 * @param pool : The structurs that this pool can generate. Use a
	 *            {@link JigsawPoolBuilder} from {@link #builder()} for simplicity.
	 */
	public void register(String poolName, List<Pair<JigsawPiece, Integer>> pool)
	{
		register(poolName, pool, JigsawPattern.PlacementBehaviour.RIGID);
	}

	/**
	 * @see #register(String, String, List, PlacementBehaviour)
	 */
	public void register(ResourceLocation poolName, ResourceLocation defaultPool, List<Pair<JigsawPiece, Integer>> pool, JigsawPattern.PlacementBehaviour placement)
	{
		JigsawManager.REGISTRY.register(new JigsawPattern(poolName, defaultPool, pool, placement));
	}

	/**
	 * @see #register(ResourceLocation, ResourceLocation, List, PlacementBehaviour)
	 * @param poolName
	 * @param defaultPool
	 * @param pool
	 */
	public void register(ResourceLocation poolName, ResourceLocation defaultPool, List<Pair<JigsawPiece, Integer>> pool)
	{
		register(poolName, defaultPool, pool, JigsawPattern.PlacementBehaviour.RIGID);
	}

	/**
	 * @see #register(ResourceLocation, ResourceLocation, List, PlacementBehaviour)
	 * @param poolName
	 * @param pool
	 * @param placement
	 */
	public void register(ResourceLocation poolName, List<Pair<JigsawPiece, Integer>> pool, JigsawPattern.PlacementBehaviour placement)
	{
		register(poolName, new ResourceLocation("empty"), pool, placement);
	}

	/**
	 * Registers a jigsaw pool in {@link JigsawManager#REGISTRY}.
	 * 
	 * @see #register(ResourceLocation, List, PlacementBehaviour)
	 * @param poolName : the name of the pool. Other jigsaw blocks will ask for
	 *            this, so make sure it matches.
	 * @param pool : The structurs that this pool can generate. Use a
	 *            {@link JigsawPoolBuilder} from {@link #builder()} for simplicity.
	 */
	public void register(ResourceLocation poolName, List<Pair<JigsawPiece, Integer>> pool)
	{
		register(poolName, pool, JigsawPattern.PlacementBehaviour.RIGID);
	}

	/**
	 * Gets a ResourceLocation for the key input using the modid and prefix as
	 * "modid:prefix+key"
	 * 
	 * @param key
	 * @return {@link ResourceLocation}
	 */
	public ResourceLocation locatePiece(String key)
	{
		return new ResourceLocation(this.modid, this.prefix + key);
	}
}